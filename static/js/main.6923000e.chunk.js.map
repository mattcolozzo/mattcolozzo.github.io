{"version":3,"sources":["email.tsx","novel.tsx","questions.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Email","Novel","props","selected","NovelInfo","chapter","className","onClick","changeChapter","style","title","subTitle","fontSize","text","Questions","value","question","onChange","e","changeQuestionSubmission","target","name","width","submitQuestion","Home","listStyleType","margin","href","rel","changeView","App","useState","view","setView","setChapter","questionSubmission","setQuestionSubmission","questionString","console","log","viewNum","selectedChapter","selectedView","viewSelector","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6923000e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Email() {\n  return <div>mattcolozzo@gmail.com</div>;\n}\n\nexport default Email;\n","import React from \"react\";\nimport \"./App.css\";\nimport NovelInfo from \"./assets/novel.json\";\n\nfunction Novel(props: {\n  chapter: number;\n  changeChapter: (selectedChapter: number) => void;\n}) {\n  const selected = NovelInfo[props.chapter];\n\n  return (\n    <div className=\"wallPaintings\">\n      <div>\n        <button onClick={() => props.changeChapter(props.chapter - 1)}>\n          prev chapter\n        </button>{\" \"}\n        <button onClick={() => props.changeChapter(props.chapter + 1)}>\n          next chapter\n        </button>\n      </div>\n      <h1 style={{}}>{selected.title}</h1>\n      <h2>{selected.subTitle}</h2>\n      <p style={{ fontSize: \"20px\" }}>{selected.text}</p>\n    </div>\n  );\n}\n\nexport default Novel;\n","import React from \"react\";\n\nfunction Questions(props: {\n  question: string;\n  changeQuestionSubmission: (questionString: string) => void;\n  submitQuestion: () => void;\n}) {\n  return (\n    <div>\n      <div className=\"input\">\n        {\"ask anything\"}\n        <textarea\n          value={props.question}\n          onChange={(e) => props.changeQuestionSubmission(e.target.value)}\n          name=\"question\"\n        ></textarea>{\" \"}\n        <button style={{ width: \"50%\" }} onClick={() => props.submitQuestion()}>\n          Submit\n        </button>\n      </div>\n      <div>\n        <h3>question</h3>\n        <p>answer</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Questions;\n","import React from \"react\";\n\nfunction Home(props: { changeView: (viewNum: number) => void }) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"homeGrid\">\n          <div className=\"navList\">\n            <ul\n              style={{ listStyleType: \"none\", margin: \"0\", fontSize: \"64px\" }}\n            >\n              <li>\n                <p style={{ margin: 0 }}>Hello</p>\n              </li>\n              <li>\n                <a\n                  className=\"App-link\"\n                  href=\"https://the-ambler.bandcamp.com/releases\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  music streaming\n                </a>\n              </li>\n              <li>\n                <a\n                  className=\"App-link\"\n                  href=\"https://open.spotify.com/album/74mXqOlgt8Vn6ObQoYbQr2?si=FOm3OYYERial2DXUtcacRQ\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  more music streaming\n                </a>\n              </li>\n\n              <li>\n                <a\n                  className=\"App-link\"\n                  href=\"https://www.instagram.com/ambleramblerambler/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  instagram\n                </a>\n              </li>\n              <li>\n                <a\n                  className=\"App-link\"\n                  href=\"https://www.youtube.com/user/Dwexen/videos\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  youtube\n                </a>\n              </li>\n\n              <li>\n                <a\n                  className=\"App-link\"\n                  href=\"https://twitter.com/amblerambler\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  twitter\n                </a>\n              </li>\n              <li>\n                <button\n                  className=\"notalink\"\n                  onClick={() => props.changeView(3)}\n                >\n                  business email\n                </button>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Email from \"./email\";\nimport Novel from \"./novel\";\nimport Questions from \"./questions\";\nimport Home from \"./Home\";\n\nconst MAX_CHAPTER = 1;\n\nfunction App() {\n  const [view, setView] = useState(0);\n  const [chapter, setChapter] = useState(0);\n  const [questionSubmission, setQuestionSubmission] = useState(\"\");\n\n  function changeQuestionSubmission(questionString: string) {\n    setQuestionSubmission(questionString);\n  }\n\n  function submitQuestion() {\n    console.log(questionSubmission);\n    setQuestionSubmission(\"\");\n  }\n  function changeView(viewNum: number) {\n    setView(viewNum);\n  }\n\n  function changeChapter(selectedChapter: number) {\n    if (selectedChapter >= 0 && selectedChapter <= MAX_CHAPTER) {\n      setChapter(selectedChapter);\n    }\n  }\n\n  function viewSelector(selectedView: any) {\n    switch (selectedView) {\n      case 1:\n        return Novel({ chapter: chapter, changeChapter: changeChapter });\n      case 2:\n        return Questions({\n          question: questionSubmission,\n          changeQuestionSubmission,\n          submitQuestion,\n        });\n      case 3:\n        return Email();\n      default:\n        return Home({ changeView: changeView });\n    }\n  }\n\n  return (\n    <>\n      <header>\n        <button onClick={() => changeView(0)}>home</button>\n        <button onClick={() => changeView(1)}>words</button>\n        <button onClick={() => changeView(2)}>questions</button>\n      </header>\n      {viewSelector(view)}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}