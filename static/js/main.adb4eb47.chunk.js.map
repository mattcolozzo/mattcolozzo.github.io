{"version":3,"sources":["email.tsx","novel.tsx","questions.tsx","Home.tsx","assets/database.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Email","React","createElement","Novel","props","selected","NovelInfo","chapter","className","onClick","changeChapter","style","title","subTitle","fontSize","text","Questions","value","question","onChange","e","changeQuestionSubmission","target","name","resize","width","submitQuestion","Home","listStyleType","margin","href","rel","changeView","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","App","_useState","useState","_useState2","_slicedToArray","view","setView","_useState3","_useState4","setChapter","_useState5","_useState6","questionSubmission","setQuestionSubmission","questionString","questionId","console","log","length","func","timer","_this","timeout","arguments","undefined","debounce","set","ref","viewNum","selectedChapter","Fragment","selectedView","viewSelector","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.adb4eb47.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Email() {\n  return <div>mattcolozzo@gmail.com</div>;\n}\n\nexport default Email;\n","import React from \"react\";\nimport \"./App.css\";\nimport NovelInfo from \"./assets/novel.json\";\n\n//add add paragraph array to json objects to make it easy to separate\nfunction Novel(props: {\n  chapter: number;\n  changeChapter: (selectedChapter: number) => void;\n}) {\n  const selected = NovelInfo[props.chapter];\n\n  return (\n    <div className=\"wallPaintings\">\n      <div>\n        <button onClick={() => props.changeChapter(props.chapter - 1)}>\n          prev chapter\n        </button>{\" \"}\n        <button onClick={() => props.changeChapter(props.chapter + 1)}>\n          next chapter\n        </button>\n      </div>\n      <h1 style={{}}>{selected.title}</h1>\n      <h2>{selected.subTitle}</h2>\n      <p style={{ fontSize: \"20px\" }}>{selected.text}</p>\n    </div>\n  );\n}\n\nexport default Novel;\n","import React from \"react\";\n\nfunction Questions(props: {\n  question: string;\n  changeQuestionSubmission: (questionString: string) => void;\n  submitQuestion: () => void;\n}) {\n  return (\n    <div>\n      <div className=\"input\">\n        {\"ask anything\"}\n        <textarea\n          value={props.question}\n          onChange={(e) => props.changeQuestionSubmission(e.target.value)}\n          name=\"question\"\n          style={{ resize: \"none\" }}\n        ></textarea>{\" \"}\n        <button style={{ width: \"50%\" }} onClick={() => props.submitQuestion()}>\n          Submit\n        </button>\n      </div>\n      <div>\n        <h3>question</h3>\n        <p>answer</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Questions;\n","import React from \"react\";\n\nfunction Home(props: { changeView: (viewNum: number) => void }) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"homeGrid\">\n          <div className=\"navList\">\n            <ul\n              style={{ listStyleType: \"none\", margin: \"0\", fontSize: \"64px\" }}\n            >\n              <li>\n                <p style={{ margin: 0 }}>Hello</p>\n              </li>\n              <li>\n                <a\n                  className=\"App-link\"\n                  href=\"https://the-ambler.bandcamp.com/releases\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  bandcamp\n                </a>\n              </li>\n              <li>\n                <a\n                  className=\"App-link\"\n                  href=\"https://open.spotify.com/album/74mXqOlgt8Vn6ObQoYbQr2?si=FOm3OYYERial2DXUtcacRQ\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  spotify\n                </a>\n              </li>\n\n              <li>\n                <a\n                  className=\"App-link\"\n                  href=\"https://www.instagram.com/ambleramblerambler/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  instagram\n                </a>\n              </li>\n              <li>\n                <a\n                  className=\"App-link\"\n                  href=\"https://www.youtube.com/user/Dwexen/videos\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  youtube\n                </a>\n              </li>\n\n              <li>\n                <a\n                  className=\"App-link\"\n                  href=\"https://twitter.com/amblerambler\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  twitter\n                </a>\n              </li>\n              <li>\n                <button\n                  className=\"notalink\"\n                  onClick={() => props.changeView(3)}\n                >\n                  business email\n                </button>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Home;\n","// Import the functions you need from the SDKs you need\n\nimport { initializeApp } from \"firebase/app\";\n\nimport { getDatabase, ref, set } from \"firebase/database\";\n// TODO: Add SDKs for Firebase products that you want to use\n\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA5Bsh7aGTlDcAziILGU5Bhle_1wObfrNg\",\n\n  authDomain: \"mattwebsite-d8d93.firebaseapp.com\",\n\n  databaseURL: \"https://mattwebsite-d8d93-default-rtdb.firebaseio.com\",\n\n  projectId: \"mattwebsite-d8d93\",\n\n  storageBucket: \"mattwebsite-d8d93.appspot.com\",\n\n  messagingSenderId: \"197341872510\",\n\n  appId: \"1:197341872510:web:a456a46b6b3e46a82eb32f\",\n\n  measurementId: \"G-BF9V6DDZBZ\",\n};\n\n// Initialize Firebase\n\nconst app = initializeApp(firebaseConfig);\n\nconst db = getDatabase(app);\n\nexport function writeUserData(questionId, question) {\n  set(ref(db, \"questions/\" + questionId), {\n    question: question,\n  });\n}\n\nexport function debounce(func, timeout = 10000) {\n  let timer;\n  return (...args) => {\n    if (!timer) {\n      func.apply(this, args);\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      timer = undefined;\n    }, timeout);\n  };\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Email from \"./email\";\nimport Novel from \"./novel\";\nimport Questions from \"./questions\";\nimport Home from \"./Home\";\nimport { writeUserData, debounce } from \"./assets/database\";\n\nconst MAX_CHAPTER = 1;\n\nfunction App() {\n  const [view, setView] = useState(0);\n  const [chapter, setChapter] = useState(0);\n  const [questionSubmission, setQuestionSubmission] = useState(\"\");\n\n  function changeQuestionSubmission(questionString: string) {\n    setQuestionSubmission(questionString);\n  }\n\n  function submitQuestion() {\n    console.log(questionSubmission);\n    setQuestionSubmission(\"\");\n    if (questionSubmission.length > 0) {\n      debounce(writeUserData(questionSubmission, questionSubmission));\n      // writeUserData(questionSubmission, questionSubmission);\n    }\n  }\n  function changeView(viewNum: number) {\n    setView(viewNum);\n  }\n\n  function changeChapter(selectedChapter: number) {\n    if (selectedChapter >= 0 && selectedChapter <= MAX_CHAPTER) {\n      setChapter(selectedChapter);\n    }\n  }\n\n  function viewSelector(selectedView: any) {\n    switch (selectedView) {\n      case 1:\n        return Novel({ chapter: chapter, changeChapter: changeChapter });\n      case 2:\n        return Questions({\n          question: questionSubmission,\n          changeQuestionSubmission,\n          submitQuestion,\n        });\n      case 3:\n        return Email();\n      default:\n        return Home({ changeView: changeView });\n    }\n  }\n\n  return (\n    <>\n      <header className=\"navHeader\">\n        <button style={{ fontSize: \"40px\" }} onClick={() => changeView(0)}>\n          home\n        </button>\n        <button onClick={() => changeView(1)}>words</button>\n        <button onClick={() => changeView(2)}>questions</button>\n      </header>\n      {viewSelector(view)}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}