{"version":3,"sources":["assets/face.JPG","assets/me.PNG","assets/guitar.JPG","assets/god.JPG","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","imgArr","guitar","god","me","face","App","useState","img","changeImg","useEffect","timer","setInterval","ranNum","Math","floor","random","length","imageChanger","clearInterval","className","src","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,yOCOrCC,EAAS,CAACC,IAAQC,IAAKC,IAAIC,KA0DlBC,MAzDf,WAAgB,IAAD,EACYC,mBAASF,KADrB,mBACNG,EADM,KACDC,EADC,KAYb,OATAC,qBAAU,WACR,IAAMC,EAAQC,aAAY,YAG5B,WAEC,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,SAAWf,EAAOgB,QAC/CR,EAAUR,EAAOY,IANkBK,KAAmB,KACrD,OAAO,kBAAMC,cAAcR,OAQ3B,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKb,EAAKY,UAAU,WAAWE,IAAI,oBACxC,kDAGA,4BACA,4BACE,uBACAF,UAAU,WACVG,KAAK,2CACLC,OAAO,SACPC,IAAI,uBAJJ,eASF,4BACE,uBACAL,UAAU,WACVG,KAAK,wCACLC,OAAO,SACPC,IAAI,uBAJJ,WASA,4BACA,uBACAL,UAAU,WACVG,KAAK,sCACLC,OAAO,SACPC,IAAI,uBAJJ,kBCrCUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1d82f008.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face.eb5fc776.JPG\";","module.exports = __webpack_public_path__ + \"static/media/me.efcb90d4.PNG\";","module.exports = __webpack_public_path__ + \"static/media/guitar.33895cba.JPG\";","module.exports = __webpack_public_path__ + \"static/media/god.23dbbcfa.JPG\";","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport resume from './assets/resume.pdf'\nimport me from './assets/me.PNG'\nimport guitar from './assets/guitar.JPG'\nimport god from './assets/god.JPG'\nimport face from './assets/face.JPG'\nconst imgArr = [guitar, god, me, face];\nfunction App() {\n  const [img, changeImg] = useState(face)\n  \n  useEffect(() => {    \n    const timer = setInterval(() => { imageChanger()  }, 20000);\n    return () => clearInterval(timer)\n  });\n  function imageChanger() {\n    //intentionally potentially OOB to display the alt text sometimes\n   let ranNum = Math.floor(Math.random() * imgArr.length);\n   changeImg(imgArr[ranNum]);\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={img} className=\"App-logo\" alt=\"the man himself\" />\n        <p>\n          Explore my content:\n        </p>\n        <ul>\n        <li>\n          <a\n          className=\"App-link\"\n          href=\"https://the-ambler.bandcamp.com/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Newest Mus\n        </a>\n          </li>\n        <li>\n          <a\n          className=\"App-link\"\n          href=\"https://soundcloud.com/user-864322219\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Muzak2\n        </a>\n          </li>\n          <li>\n          <a\n          className=\"App-link\"\n          href=\"https://soundcloud.com/matt-colozzo\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          0ld Music\n        </a>\n          </li>\n        </ul>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}